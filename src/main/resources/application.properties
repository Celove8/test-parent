server.port=80

# druid数据库
#jdbc.driverClassName=com.mysql.jdbc.Driver
#jdbc.url=jdbc:mysql://192.168.1.2:3306/test
#jdbc.username=root
#jdbc.password=111111

# logging
logging.level.com.snail=debug
logging.level.org.springframework=debug
#logging.config=classpath:logs/test-log.xml

# 默认自带 HikariCP
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://192.168.1.2:3306/demo
spring.datasource.username=root
spring.datasource.password=111111

# mybatis
mybatis.type-aliases-package=com.snail.test.pojo
# mapper  如果没有映射文件，请注释掉
mybatis.mapper-locations=classpath:mappers/**/*
#开启驼峰支持
mybatis.configuration.map-underscore-to-camel-case=true

# aop
#添加@EnableAspectJAutoProxy。
spring.aop.auto = true
#是否要创建基于子类（CGLIB）的代理（true），而不是基于标准Java接口的代理（false）。
spring.aop.proxy-target-class = false

# ELASTICSEARCH（ElasticsearchProperties）
#elasticsearch ＃Elasticsearch集群名称。
#spring.data.elasticsearch.cluster-name = test
#群集节点地址的逗号分隔列表。如果未指定，则启动客户机节点。
spring.data.elasticsearch.cluster-nodes = 192.168.1.2:9300
spring.data.elasticsearch.properties.transport.tcp.connect_timeout=120s
#spring.data.elasticsearch.properties。* =＃用于配置客户端的其他属性。
#spring.data.elasticsearch.repositories.enabled = true ＃启用Elasticsearch存储库。

# MONGODB（MongoProperties）
#Mongo数据库URI。设置时，将忽略主机和端口。
spring.data.mongodb.uri = mongodb://192.168.1.2:27017/test
#认证数据库名称。
#spring.data.mongodb.authentication-database = test
#数据库名称。
#spring.data.mongodb.database = test
#spring.data.mongodb.field命名策略 =＃要使用的FieldNamingStrategy的完全限定名称。
#spring.data.mongodb.grid-fs-database =＃GridFS数据库名称。
#spring.data.mongodb.host = 192.168.1.2
#spring.data.mongodb.password = 111111
#spring.data.mongodb.port = 27017
#mongo服务器的登录用户。
#spring.data.mongodb.username = root

# REDIS（RedisProperties）
#连接工厂使用的数据库索引。
spring.redis.database = 0
spring.redis.host = 192.168.1.2
spring.redis.port = 6379
# redis服务器的登录密码。这个要登入服务器，设置密码。因为一开始redis是不用密码的
spring.redis.password=111111
#池在给定时间可以分配的最大连接数。使用负值无限制。
spring.redis.lettuce.pool.max-active = 8
#池中“空闲”连接的最大数量。使用负值来表示无限数量的空闲连接。
spring.redis.lettuce.pool.max-idle = 8
#在池耗尽时抛出异常之前，连接分配应阻止的最大时间量（以毫秒为单位）。使用负值无限期地阻止。
spring.redis.lettuce.pool.max-wait = -1
# 要在池中维护的空闲连接的最小数目的目标。此设置仅当其为正时才具有效果
spring.redis.lettuce.pool.min-idle = 0
#spring.redis.sentinel.master =＃Redis服务器的名称。
#spring.redis.sentinel.nodes =＃主机：端口对的逗号分隔列表。
#连接超时，以毫秒为单位。
#spring.redis.timeout = 300s

#＃RABBIT（RabbitProperties）
#spring.rabbitmq.addresses =＃客户端应连接到的地址的逗号分隔列表。
#spring.rabbitmq.dynamic = true ＃创建一个AmqpAdmin bean。
#spring.rabbitmq.host = localhost ＃RabbitMQ主机。
#spring.rabbitmq.listener.acknowledge-mode =＃确认容器的模式。
#spring.rabbitmq.listener.auto-startup = true ＃在启动时自动启动容器。
#spring.rabbitmq.listener.concurrency =＃最小消费者数。
#spring.rabbitmq.listener.max-concurrency =＃最大消费者数。
#spring.rabbitmq.listener.prefetch =＃在单个请求中处理的消息数。它应该大于或等于事务大小（如果使用）。
#spring.rabbitmq.listener.transaction-size =＃要在事务中处理的消息数。为了获得最佳结果，它应小于或等于预取计数。
#spring.rabbitmq.password =＃登录以对代理进行身份验证。
#spring.rabbitmq.port = 5672 ＃RabbitMQ端口。
#spring.rabbitmq.requested-heartbeat =＃请求的心跳超时，以秒为单位; 零为零。
#spring.rabbitmq.ssl.enabled = false ＃启用SSL支持。
#spring.rabbitmq.ssl.key-store =＃包含SSL证书的密钥库的路径。
#spring.rabbitmq.ssl.key-store-password =＃用于访问密钥库的密码。
#spring.rabbitmq.ssl.trust-store =＃持有SSL证书的信任存储。
#spring.rabbitmq.ssl.trust-store-password =＃用于访问信任存储库的密码。
#spring.rabbitmq.username =＃登录用户以对代理进行身份验证。
#spring.rabbitmq.virtual-host =＃连接到代理时要使用的虚拟主机。


#Thymeleaf
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.cache=false
#spring.thymeleaf.cache-period=0
#spring.template.cache=false
#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.prefix=classpath:templates/
#spring.thymeleaf.suffix=.html

#hibernate配置
spring.jpa.database=MYSQL
spring.jpa.show-sql=true
# 自动创建、更新、验证数据库表结构，hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#大小写转换问题
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

#避免启动报错，设为false，如果存在resoureces/processes/*.bpmn文件，可以去掉本行
#关闭activiti自动部署（使用流程设计器部署，不使用具体文件访问方式）
spring.activiti.check-process-definitions=false
#配置项可以设置流程引擎启动和关闭时数据库执行的策略
#false：false为默认值，设置为该值后，Activiti在启动时，会对比数据库表中保存的版本，如果版本不匹配时，将在启动时抛出异常。
#true：设置为该值后，Activiti会对数据库中所有的表进行更新，如果表不存在，则Activiti会自动创建。
#create-drop：Activiti启动时，会执行数据库表的创建操作，在Activiti关闭时，执行数据库表的删除操作。
#drop-create：Activiti启动时，执行数据库表的删除操作在Activiti关闭时，会执行数据库表的创建操作。
spring.activiti.database-schema-update=true
#保存历史数据级别设置为full最高级别，便于历史数据的追溯
spring.activiti.history-level=full
